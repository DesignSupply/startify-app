---
import Layout from '@/layouts/Layout.astro';
import type { MarkdownInstance } from 'astro';

type frontmatterType = {
  id: number;
  title: string;
  description?: string;
  ogpImage?: string;
  type?: string;
  path?: string;
};

export async function getStaticPaths() {
  const postData: MarkdownInstance<frontmatterType>[] = await Astro.glob<frontmatterType>('@/content/posts/*.md');
  return postData.map((post) => ({ params: { id: Number(post.frontmatter.id) } }));
}

const { id } = Astro.params;
const allPosts: MarkdownInstance<frontmatterType>[] = await Astro.glob<frontmatterType>('@/content/posts/*.md');
const currentPost = allPosts.find((post) => Number(post.frontmatter.id) === Number(id));
if (!currentPost) {
  throw new Error(`Post not found: ${id}`);
}
const { Content } = currentPost;
const pageId = `post-${id}`,
  pageMeta = currentPost.frontmatter,
  ldJSON = [
    {
      '@type': 'ListItem',
      position: 1,
      item: {
        '@id': `${import.meta.env.PUBLIC_ENVURL}`,
        name: 'HOME'
      }
    },
    {
      '@type': 'ListItem',
      position: 2,
      item: {
        '@id': `${import.meta.env.PUBLIC_ENVURL}/posts/`,
        name: '投稿一覧'
      }
    },
    {
      '@type': 'ListItem',
      position: 3,
      item: {
        '@id': `${import.meta.env.PUBLIC_ENVURL}/posts/${id}/`,
        name: `${pageMeta.title}`
      }
    }
  ];
---

<Layout
  pageName={pageId}
  title={pageMeta.title}
  description={pageMeta.description}
  ogpImage={pageMeta.ogpImage}
  type={pageMeta.type}
  path={pageMeta.path}
  ldJSON={ldJSON}
>
  <main class="l-main p-page-single">
    <article>
      <section class="l-wrapper">
        <div class="l-container">
          <div class="l-inner">
            <div class="__block-1">
              <h1>{pageMeta.title}</h1>
              <Content />
              <a href="/posts/">投稿一覧に戻る</a>
            </div>
          </div>
        </div>
      </section>
    </article>
  </main>
</Layout>
