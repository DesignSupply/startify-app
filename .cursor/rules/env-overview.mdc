---
description: 開発環境概要
globs: 
alwaysApply: false
---
# 開発環境概要

---

## ディレクトリ

### ディレクトリ構成

開発環境は以下のファイル・ディレクトリ構造にしたがって実装を進めていくものとする。

```
/                                      # 開発環境ルート
├── /backend                             # バックエンド（appコンテナの/var/www/htmlマウントポイント）
│   ├── /_webroot                          # 開発環境ローカルサーバードキュメントルート（ホスト名:localhostのドキュメントルート）
│   │   ├── index.php                        # バックエンドアプリケーションエントリーポイントファイル
│   │   └── /storage                         # バックエンドファイルストレージシンボリックリンク
│   ├── /_cms-webroot                      # 開発環境ローカルサーバードキュメントルート（ホスト名:cms.localhostのドキュメントルート）
│   │   ├── index.php                        # WordPressサイトエントリーポイント
│   │   └── /wordpress                       # WordPressコアファイルシンボリックリンク
│   ├── /_testing-webroot                  # 開発環境ローカルサーバードキュメントルート（ホスト名:testing.localhostのドキュメントルート）
│   │   ├── testing-app.php                  # PHP情報表示確認用ファイル
│   │   ├── testing-smtp.php                 # メール送受信テスト用ファイル
│   │   └── /preview                         # 静的HTMLプレビューテストディレクトリ
│   ├── /laravel                           # Laravelプロジェクトルート
│   └── /wordpress                         # WordPressプロジェクトルート
│       ├── wp-content
│           ├── themes
│               ├── startify-classic-theme   # WordPressテーマ開発用クラッシックテーマ
│               ├── …
├── /frontend                            # フロントエンド
│   ├── /_design-tokens                    # デザイントークン
│   │   ├── color-scheme.yaml                # 配色用
│   │   ├── size-scale.yaml                  # サイズ指定
│   │   ├── typography.yaml                  # タイポグラフィ
│   │   ├── grid-system.yaml                 # グリッドシステム
│   │   ├── dropshadow.yaml                  # ドロップシャドウ
│   │   ├── corner-style.yaml                # コーナースタイル
│   │   └── easing.yaml                      # イージング
│   ├── /_ui                               # UIコンポーネントHTMLテンプレート
│   │   ├── /components                      # コンポーネント要素テンプレート
│   │   ├── /head                            # head要素テンプレート
│   │   ├── /layouts                         # レイアウト要素テンプレート
│   │   └── page.html                        # ページテンプレート
│   ├── /next                              # Next.jsプロジェクトルート
│   ├── /nuxt                              # Nuxt.jsプロジェクトルート
│   ├── /astro                             # Astroプロジェクトルート
│   ├── /vite                              # Viteプロジェクトルート
│   └── /react-native                      # ReactNativeプロジェクトルート
├── /server                              # サーバー
│   ├── /docker                            # Docker環境
│   │   ├── /mailpit                         # SMTPサーバー
│   │   │   └── Dockerfile                   # SMTPサーバーDockerfile
│   │   ├── /mysql                           # データベースサーバー
│   │   │   ├── Dockerfile                   # データベースサーバーDockerfile
│   │   │   └── my.cnf                       # データベースサーバー設定ファイル
│   │   ├── /nginx                           # ウェブサーバー
│   │   │   ├── certs                        # SSL証明書
│   │   │   │   ├── localhost+[n].pem          # 証明書（mkcert生成、Git追跡対象外）
│   │   │   │   └── localhost+[n]-key.pem      # 秘密鍵（mkcert生成、Git追跡対象外）
│   │   │   ├── Dockerfile                   # ウェブサーバーDockerfile
│   │   │   └── nginx.conf                   # ウェブサーバー設定ファイル
│   │   └── /php                             # プログラミング言語
│   │       ├── Dockerfile                   # PHPDockerfile
│   │       └── php.ini                      # PHP設定ファイル
│   ├── docker-compose.yml                 # Docker Composeファイル
│   ├── .env                               # Docker環境変数
│   └── Makefile                           # Makeコマンドファイル
├── /specifications                      # 仕様書・タスクリスト用ドキュメント
├── /.cursor                             # Cursor設定ファイル
│   └── /rules                             # Cursor Project Rules
├── README.md                            # 概要説明
├── .gitignore                           # Git設定
└── .cursorrules                         # Cursor設定
```

### 主要ディレクトリ詳細説明

1. `/backend/`
   - 用途: バックエンドアプリケーションのソースコード、およびwebコンテナードキュメントルート
   - プロジェクト
     - **Laravel**: ウェブアプリケーション
     - **WordPress**: CMS
2. `/frontend/`
   - 用途: フロントエンドアプリケーションのソースコード、UIデザイン用コンポーネント、デザイントークン
   - プロジェクト
     - **Next.js**: フロントエンドアプリケーション
     - **Nuxt.js**: フロントエンドアプリケーション
     - **Astro**: 静的サイトジェネレーター
     - **Vite**: フロントエンドビルドツール
     - **React Native**: モバイルアプリケーションフレームワーク
   - デザイントークン
     - **color-scheme**: 配色
     - **size-scale**: サイズ
     - **typography**: テキスト
     - **grid-system**: レイアウト
     - **dropshadow**: ドロップシャドウ
     - **corner-style**: コーナースタイル
     - **easing**: イージング
3. `/server/`
   - 用途: Docker環境構築用ファイル
   - コンテナー
     - **web**: ウェブサーバーコンテナー / `Nginx` イメージを使用
     - **app**: プログラミング言語コンテナー / `PHP` イメージを使用
     - **db**: データベースサーバーコンテナー / `MariaDB` イメージを使用
     - **smtp**: SMTPサーバーコンテナー / `mailpit` イメージを使用
4. `/specifications/`
   - 用途: AI駆動開発用仕様書・タスクリスト

---

## Docker環境

### Docker環境変数

- 環境変数ファイルパス: `/server/.env`

| 変数名 | 説明 | デフォルト値 |
| --- | --- | --- |
| COMPOSE_PROJECT_NAME | Docker Compose プロジェクト名 | startify-app |
| APP_NAME | アプリケーション名 | startify-app |
| DB_HOST | データベースサーバーホスト名 | localhost |
| DB_PORT | データベースサーバーポート番号 | 3306 |
| DB_DATABASE | アプリケーション用データベース名 | master |
| DB_DATABASE | アプリケーション用データベースユーザー名 | admin |
| DB_PASSWORD | アプリケーション用データベースパスワード | secret |
| CMS_DATABASE | CMS用データベース名 | cms |
| CMS_USERNAME | CMS用データベースユーザー名 | admin |
| CMS_USERNAME | CMS用データベースパスワード | password |
| CMS_EMAIL | CMS用管理者ユーザーメールアドレス | admin@example.com |

### コンテナー依存関係

```mermaid
graph LR
    app --> db
    app --> smtp
    web --> app
```

---

### ローカルSSL/HTTPS構成（mkcert）

- 概要
  - `localhost` / `cms.localhost` / `testing.localhost` / `api.localhost` を HTTPS 対応
  - 証明書格納: `/server/docker/nginx/certs`
  - 詳細手順: `/specifications/server/docker/TASK_004.md`
- 証明書作成（ホストOS）
  - 事前: `mkcert -install`（Firefox利用時は `brew install nss` 後に再実行）
  - 生成: `mkcert localhost cms.localhost testing.localhost api.localhost`
  - 生成物: `localhost+3.pem` / `localhost+3-key.pem` を `/server/docker/nginx/certs/` へ配置
- docker-compose（web）
  - ポート: `443:443` を公開
  - ボリューム: `./docker/nginx/certs:/etc/nginx/certs:ro`
- Nginx設定
  - httpブロック: `ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m;`
  - サーバーブロック（各ホスト）
    - 80→443 リダイレクト: `return 301 https://$host$request_uri;`
    - 443: `ssl_certificate /etc/nginx/certs/localhost+3.pem;` / `ssl_certificate_key /etc/nginx/certs/localhost+3-key.pem;`
- Git管理
  - 証明書はGit除外（`/server/docker/nginx/certs/*` を `.gitignore` 登録、`.gitkeep` を除外解除）
- 動作確認
  - ブラウザで `https://localhost/`, `https://cms.localhost/`, `https://testing.localhost/`, `https://api.localhost/` へアクセス
  - 80番アクセスは自動でHTTPSへリダイレクトされる

---

## トラブルシューティング・検証

### 一般的な問題と解決方法

1. コンテナー起動失敗
   - 症状: docker-compose up実行時にエラー
   - 解決: ポート競合の確認、既存コンテナーの停止
2. データベース接続エラー
   - 症状: アプリケーションがデータベースに接続できない
   - 解決: 環境変数の確認、ネットワーク設定の確認

### 環境検証項目
- [ ] Dockerコンテナーが正常に起動するか
- [ ] データベース接続が確立できるか
- [ ] メール送信機能が動作するか
- [ ] フロントエンド開発サーバーが起動するか

---

## 各種ホスト名

- バックエンド
  - `https://localhost` : Laravelアプリケーション
  - `https://cms.localhost` : CMS（WordPress）
  - `https://testing.localhost` : テスト環境用
  - `https://api.localhost` : Laravel API用
  - `http://localhost:8025/` : Mailpit ウェブメール
- フロントエンド
  - `http://localhost:3000` : Next.js開発サーバー
  - `http://localhost:2000` : Astro、Vite環境開発サーバー

---
