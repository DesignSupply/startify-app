---
description: 開発環境構築手順
globs: server/**/*.*
alwaysApply: false
---
# 環境構築手順

---

## 1. Docker環境構築

### 1.1. Docker用環境変数ファイル作成

下記の場所にファイルを作成します、`COMPOSE_PROJECT_NAME` とアプリケーション名、データベース接続情報と、CMSのログイン情報を環境変数として設定します。

- `/server/.env`

```env
# Docker用環境変数ファイルのテンプレート例
COMPOSE_PROJECT_NAME=startify-app

APP_NAME=startify-app

DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=master
DB_USERNAME=admin
DB_PASSWORD=secret

CMS_DATABASE=cms
CMS_USERNAME=admin
CMS_PASSWORD=password
CMS_EMAIL=admin@example.com
```

### 1.2. 各種イメージ用Dcokerfileの作成

下記の場所にファイルを作成します、それぞれ適切なバージョンのDockerイメージを使用します。

- `/server/docker/nginx/Dockerfile`
- `/server/docker/php/Dockerfile`
- `/server/docker/mysql/Dockerfile`
- `/server/docker/mailpit/Dockerfile`

### 1.3. MySQL用設定ファイル、nginx用設定ファイル、PHP用設定ファイルの作成

下記の場所にファイルを作成します、各設定ファイルは、Dockerのコンテナーにマウントされるようにします。

- `/server/docker/mysql/my.cnf`
- `/server/docker/nginx/nginx.conf`
- `/server/docker/php/php.ini`

### 1.4. docker-compose.ymlの作成

下記の場所にファイルを作成します、イメージ、コンテナー、ボリューム名など、環境変数ファイルで指定した値が紐づくようにします。

- `/server/docker-compose.yml`

### 1.5. Makefileの作成

下記の場所にファイルを作成します、Docker操作、Laravel、WordPressを扱う中で必要とされる `makeコマンド` を登録します。

- `/server/Makefile`

### 1.6. Dockerイメージのビルド、コンテナーの起動

下記のコマンドでDockerイメージのビルド、コンテナーの起動を行います。

```bash
cd /server
make build
make up
```

### 1.7. 動作確認

Dockerコンテナー起動後、以下の方法で動作確認を行います。

- ローカル環境データベース接続
  - 期待される結果: 
    - 環境変数で設定した情報でローカル環境のデータベースに接続できる。
- PHP詳細情報の表示
  - 必要なタスク: 
    - `php_info()` 関数を実装した、 `/backend/_webroot/testing-app.php` ファイルを作成する。
  - 期待される結果: 
    - `http://localhost/testing-app.php` にアクセスして、PHPの情報が表示される。
- ローカル環境でのメール送受信
  - 必要なタスク: 
    - `mail()` 関数を使用しメール送信のテスト処理を実装した、`/backend/_webroot/testing-smtp.php` ファイルを作成する。
  - 期待される結果: 
    - `http://localhost/testing-smtp.php` にアクセスして、メール送信テスト用ファイルを使用して送信されている。
    - `http://localhost:8025/` にアクセスして、MailpitのWebメール画面が表示され、送信されたテストメールの受信ができている。

---

## 2. Laravel環境構築

### 2.1. Laravelプロジェクトの作成

Dockerコンテナー内でLaravelのインストールを行います、Laravelインストール後にマウントされた `/backend/laravel` ディレクトリ配下にソースコードが同期されていることを確認します。

```bash
cd /server
make laravel-install
```

### 2.2. 環境変数ファイルの設定、キーの生成

Dockerで使用している環境変数を `/backend/laravel/.env` ファイルに反映し、キーを生成します。

```bash
cd /server
make laravel-keygen
```

### 2.3. データベースの作成、マイグレーション

下記のコマンドでデータベースの作成、マイグレーションを行います。

```bash
cd /server
make laravel-migrate
```

ローカル環境のデータベースにアクセスし、Laravelのマイグレーションによってテーブルが作成されていることを確認します。

### 2.4. ストレージのシンボリックリンク作成

ストレージのシンボリックリンクを作成します。

```bash
cd /server
make laravel-storage-link
```

アプリケーションのルートディレクトリがドキュメントルートより上の階層にある場合にはシンボリックリンクの場所を変更します。

```bash
cd /server
make laravel-storage-link-change
```

シンボリックリンクの変更後、下記の場所にストレージのシンボリックリンクが作成されているかを確認します。

- `/backend/_webroot/storage`

### 2.7. アプリケーションエントリーポイントファイルの作成

下記の場所にアプリケーションのエントリーポイントファイルを作成します、既存のLaravelのエントリーポイントファイルをコピーし、Laravelのプロジェクトルートを参照するように変更します。

- `/backend/_webroot/index.php`

### 2.5. テスト・表示確認

```bash
cd /server
make laravel-test
```

- テストが実行され、テスト結果が表示されることを確認します。
- `http://localhost/` にアクセスして、Laravelのテストページが表示されることを確認します。

---
